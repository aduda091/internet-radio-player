{"version":3,"sources":["node_modules/react-player/lib/players/Mux.js"],"names":[],"mappings":";AAAA,IAAA,EAAA,OAAA,OACA,EAAA,OAAA,eACA,EAAA,OAAA,yBACA,EAAA,OAAA,oBACA,EAAA,OAAA,eACA,EAAA,OAAA,UAAA,eACA,EAAA,CAAA,EAAA,EAAA,IAAA,KAAA,EAAA,EAAA,EAAA,EAAA,CAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAA,MAAA,IAAA,EAAA,GAAA,EACA,EAAA,CAAA,EAAA,KACA,IAAA,IAAA,KAAA,EACA,EAAA,EAAA,EAAA,CAAA,IAAA,EAAA,GAAA,YAAA,KAEA,EAAA,CAAA,EAAA,EAAA,EAAA,KACA,GAAA,GAAA,iBAAA,GAAA,mBAAA,EACA,IAAA,IAAA,KAAA,EAAA,GACA,EAAA,KAAA,EAAA,IAAA,IAAA,GACA,EAAA,EAAA,EAAA,CAAA,IAAA,IAAA,EAAA,GAAA,aAAA,EAAA,EAAA,EAAA,KAAA,EAAA,aAEA,OAAA,GAEA,EAAA,CAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,GAAA,GAKA,GAAA,GAAA,EAAA,WAAA,EAAA,EAAA,EAAA,UAAA,CAAA,MAAA,EAAA,YAAA,IACA,IAEA,EAAA,GAAA,EAAA,EAAA,GAAA,aAAA,CAAA,OAAA,IAAA,GACA,EAAA,CAAA,EAAA,EAAA,KACA,EAAA,EAAA,iBAAA,EAAA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,GACA,EAAA,EAAA,CACA,QAAA,IAAA,IAEA,OAAA,QAAA,EAAA,GACA,IAAA,EAAA,EAAA,QAAA,UACA,EAAA,QAAA,eACA,MAAA,EAAA,2EACA,MAAA,UAAA,EAAA,UACA,cACA,SAAA,WAEA,EAAA,KAAA,UAAA,IAAA,IAAA,KAAA,MAAA,WAAA,IACA,EAAA,KAAA,SAAA,IAAA,IAAA,KAAA,MAAA,UAAA,IACA,EAAA,KAAA,WAAA,IAAA,IAAA,KAAA,MAAA,YAAA,IACA,EAAA,KAAA,cAAA,IAAA,IAAA,KAAA,MAAA,eAAA,IACA,EAAA,KAAA,UAAA,IAAA,IAAA,KAAA,MAAA,WAAA,IACA,EAAA,KAAA,UAAA,IAAA,IAAA,KAAA,MAAA,WAAA,IACA,EAAA,KAAA,UAAA,IAAA,IAAA,KAAA,MAAA,WAAA,IACA,EAAA,KAAA,uBAAA,GAAA,KAAA,MAAA,qBAAA,EAAA,OAAA,eACA,EAAA,KAAA,cAAA,IAAA,IAAA,KAAA,MAAA,eAAA,IACA,EAAA,KAAA,SAAA,IACA,KAAA,MAAA,OAAA,EAAA,OAAA,eAEA,EAAA,KAAA,mBAAA,KACA,MAAA,EAAA,KAAA,cACA,KAAA,MAAA,WAAA,KAEA,EAAA,KAAA,OAAA,KACA,KAAA,OAAA,OAAA,IAEA,EAAA,KAAA,SAAA,KACA,KAAA,OAAA,OAAA,IAEA,EAAA,KAAA,MAAA,IACA,KAAA,OAAA,IAGA,oBACA,KAAA,MAAA,SAAA,KAAA,MAAA,QAAA,MACA,KAAA,aAAA,KAAA,QACA,MAAA,EAAA,KAAA,cAAA,KAAA,MAAA,KACA,IACA,KAAA,OAAA,WAAA,GAGA,uBACA,KAAA,OAAA,WAAA,KACA,KAAA,gBAAA,KAAA,QAEA,aAAA,GACA,MAAA,YAAA,GAAA,KAAA,MACA,EAAA,iBAAA,OAAA,KAAA,QACA,EAAA,iBAAA,UAAA,KAAA,UACA,EAAA,iBAAA,UAAA,KAAA,aACA,EAAA,iBAAA,QAAA,KAAA,SACA,EAAA,iBAAA,SAAA,KAAA,QACA,EAAA,iBAAA,QAAA,KAAA,SACA,EAAA,iBAAA,QAAA,KAAA,SACA,EAAA,iBAAA,aAAA,KAAA,sBACA,EAAA,iBAAA,wBAAA,KAAA,aACA,EAAA,iBAAA,wBAAA,KAAA,cACA,EAAA,iBAAA,gCAAA,KAAA,0BACA,EAAA,iBAAA,UAAA,KAAA,SACA,GACA,EAAA,aAAA,cAAA,IAGA,gBAAA,GACA,EAAA,oBAAA,UAAA,KAAA,SACA,EAAA,oBAAA,OAAA,KAAA,QACA,EAAA,oBAAA,UAAA,KAAA,UACA,EAAA,oBAAA,UAAA,KAAA,aACA,EAAA,oBAAA,QAAA,KAAA,SACA,EAAA,oBAAA,SAAA,KAAA,QACA,EAAA,oBAAA,QAAA,KAAA,SACA,EAAA,oBAAA,QAAA,KAAA,SACA,EAAA,oBAAA,aAAA,KAAA,sBACA,EAAA,oBAAA,wBAAA,KAAA,aACA,EAAA,oBAAA,wBAAA,KAAA,cACA,EAAA,oBAAA,UAAA,KAAA,SAEA,WAAA,GACA,IAAA,EACA,MAAA,QAAA,EAAA,OAAA,GAAA,KAAA,MACA,KAAA,OAAA,EAAA,WAAA,qBAAA,EAAA,EAAA,IAAA,eACA,IACA,MAAA,EAAA,EAAA,QAAA,UAAA,EAAA,eACA,UAEA,KAEA,KAAA,MAAA,WACA,MAAA,GACA,EAAA,GAGA,MAAA,CAAA,GAAA,EAAA,MAAA,EAAA,eACA,KAAA,OAAA,WAAA,EAEA,OACA,MAAA,EAAA,KAAA,OAAA,OACA,GACA,EAAA,MAAA,KAAA,MAAA,SAGA,QACA,KAAA,OAAA,QAEA,OACA,KAAA,OAAA,WAAA,KAEA,OAAA,EAAA,GAAA,GACA,KAAA,OAAA,YAAA,EACA,GACA,KAAA,QAGA,UAAA,GACA,KAAA,OAAA,OAAA,EAEA,YACA,KAAA,OAAA,yBAAA,SAAA,0BAAA,KAAA,QACA,KAAA,OAAA,0BAGA,aACA,SAAA,sBAAA,SAAA,0BAAA,KAAA,QACA,SAAA,uBAGA,gBAAA,GACA,IACA,KAAA,OAAA,aAAA,EACA,MAAA,GACA,KAAA,MAAA,QAAA,IAGA,cACA,IAAA,KAAA,OACA,OAAA,KACA,MAAA,SAAA,EAAA,SAAA,GAAA,KAAA,OACA,OAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EACA,EAAA,IAAA,EAAA,OAAA,GAEA,EAEA,iBACA,OAAA,KAAA,OAEA,KAAA,OAAA,YADA,KAGA,mBACA,IAAA,KAAA,OACA,OAAA,KACA,MAAA,SAAA,GAAA,KAAA,OACA,GAAA,IAAA,EAAA,OACA,OAAA,EAEA,MAAA,EAAA,EAAA,IAAA,EAAA,OAAA,GACA,EAAA,KAAA,cACA,OAAA,EAAA,EACA,EAEA,EAEA,cAAA,GACA,MAAA,CAAA,GAAA,EAAA,MAAA,EAAA,eACA,OAAA,EAEA,SACA,MAAA,IAAA,EAAA,QAAA,EAAA,KAAA,EAAA,SAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,OAAA,GAAA,KAAA,MACA,EAAA,CACA,MAAA,SAAA,EAAA,EAAA,OACA,OAAA,SAAA,EAAA,EAAA,QAKA,OAHA,IAAA,IACA,EAAA,cAAA,QAEA,EAAA,QAAA,cACA,aACA,CACA,IAAA,KAAA,IACA,cAAA,KAAA,cAAA,GACA,MAAA,EACA,QAAA,OACA,SAAA,QAAA,EACA,MAAA,EAAA,QAAA,EACA,KAAA,EAAA,QAAA,KACA,EAAA,cAKA,EAAA,EAAA,cAAA,OACA,EAAA,EAAA,UAAA,EAAA,QAAA","file":"Mux.470419fa.js","sourceRoot":"..","sourcesContent":["var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar Mux_exports = {};\n__export(Mux_exports, {\n  default: () => Mux\n});\nmodule.exports = __toCommonJS(Mux_exports);\nvar import_react = __toESM(require(\"react\"));\nvar import_patterns = require(\"../patterns\");\nconst SDK_URL = \"https://cdn.jsdelivr.net/npm/@mux/mux-player@VERSION/dist/mux-player.mjs\";\nclass Mux extends import_react.Component {\n  constructor() {\n    super(...arguments);\n    // Proxy methods to prevent listener leaks\n    __publicField(this, \"onReady\", (...args) => this.props.onReady(...args));\n    __publicField(this, \"onPlay\", (...args) => this.props.onPlay(...args));\n    __publicField(this, \"onBuffer\", (...args) => this.props.onBuffer(...args));\n    __publicField(this, \"onBufferEnd\", (...args) => this.props.onBufferEnd(...args));\n    __publicField(this, \"onPause\", (...args) => this.props.onPause(...args));\n    __publicField(this, \"onEnded\", (...args) => this.props.onEnded(...args));\n    __publicField(this, \"onError\", (...args) => this.props.onError(...args));\n    __publicField(this, \"onPlayBackRateChange\", (event) => this.props.onPlaybackRateChange(event.target.playbackRate));\n    __publicField(this, \"onEnablePIP\", (...args) => this.props.onEnablePIP(...args));\n    __publicField(this, \"onSeek\", (e) => {\n      this.props.onSeek(e.target.currentTime);\n    });\n    __publicField(this, \"onDurationChange\", () => {\n      const duration = this.getDuration();\n      this.props.onDuration(duration);\n    });\n    __publicField(this, \"mute\", () => {\n      this.player.muted = true;\n    });\n    __publicField(this, \"unmute\", () => {\n      this.player.muted = false;\n    });\n    __publicField(this, \"ref\", (player) => {\n      this.player = player;\n    });\n  }\n  componentDidMount() {\n    this.props.onMount && this.props.onMount(this);\n    this.addListeners(this.player);\n    const playbackId = this.getPlaybackId(this.props.url);\n    if (playbackId) {\n      this.player.playbackId = playbackId;\n    }\n  }\n  componentWillUnmount() {\n    this.player.playbackId = null;\n    this.removeListeners(this.player);\n  }\n  addListeners(player) {\n    const { playsinline } = this.props;\n    player.addEventListener(\"play\", this.onPlay);\n    player.addEventListener(\"waiting\", this.onBuffer);\n    player.addEventListener(\"playing\", this.onBufferEnd);\n    player.addEventListener(\"pause\", this.onPause);\n    player.addEventListener(\"seeked\", this.onSeek);\n    player.addEventListener(\"ended\", this.onEnded);\n    player.addEventListener(\"error\", this.onError);\n    player.addEventListener(\"ratechange\", this.onPlayBackRateChange);\n    player.addEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n    player.addEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n    player.addEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n    player.addEventListener(\"canplay\", this.onReady);\n    if (playsinline) {\n      player.setAttribute(\"playsinline\", \"\");\n    }\n  }\n  removeListeners(player) {\n    player.removeEventListener(\"canplay\", this.onReady);\n    player.removeEventListener(\"play\", this.onPlay);\n    player.removeEventListener(\"waiting\", this.onBuffer);\n    player.removeEventListener(\"playing\", this.onBufferEnd);\n    player.removeEventListener(\"pause\", this.onPause);\n    player.removeEventListener(\"seeked\", this.onSeek);\n    player.removeEventListener(\"ended\", this.onEnded);\n    player.removeEventListener(\"error\", this.onError);\n    player.removeEventListener(\"ratechange\", this.onPlayBackRateChange);\n    player.removeEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n    player.removeEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n    player.removeEventListener(\"canplay\", this.onReady);\n  }\n  async load(url) {\n    var _a;\n    const { onError, config } = this.props;\n    if (!((_a = globalThis.customElements) == null ? void 0 : _a.get(\"mux-player\"))) {\n      try {\n        const sdkUrl = SDK_URL.replace(\"VERSION\", config.version);\n        await import(\n          /* webpackIgnore: true */\n          `${sdkUrl}`\n        );\n        this.props.onLoaded();\n      } catch (error) {\n        onError(error);\n      }\n    }\n    const [, id] = url.match(import_patterns.MATCH_URL_MUX);\n    this.player.playbackId = id;\n  }\n  play() {\n    const promise = this.player.play();\n    if (promise) {\n      promise.catch(this.props.onError);\n    }\n  }\n  pause() {\n    this.player.pause();\n  }\n  stop() {\n    this.player.playbackId = null;\n  }\n  seekTo(seconds, keepPlaying = true) {\n    this.player.currentTime = seconds;\n    if (!keepPlaying) {\n      this.pause();\n    }\n  }\n  setVolume(fraction) {\n    this.player.volume = fraction;\n  }\n  enablePIP() {\n    if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n      this.player.requestPictureInPicture();\n    }\n  }\n  disablePIP() {\n    if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n      document.exitPictureInPicture();\n    }\n  }\n  setPlaybackRate(rate) {\n    try {\n      this.player.playbackRate = rate;\n    } catch (error) {\n      this.props.onError(error);\n    }\n  }\n  getDuration() {\n    if (!this.player)\n      return null;\n    const { duration, seekable } = this.player;\n    if (duration === Infinity && seekable.length > 0) {\n      return seekable.end(seekable.length - 1);\n    }\n    return duration;\n  }\n  getCurrentTime() {\n    if (!this.player)\n      return null;\n    return this.player.currentTime;\n  }\n  getSecondsLoaded() {\n    if (!this.player)\n      return null;\n    const { buffered } = this.player;\n    if (buffered.length === 0) {\n      return 0;\n    }\n    const end = buffered.end(buffered.length - 1);\n    const duration = this.getDuration();\n    if (end > duration) {\n      return duration;\n    }\n    return end;\n  }\n  getPlaybackId(url) {\n    const [, id] = url.match(import_patterns.MATCH_URL_MUX);\n    return id;\n  }\n  render() {\n    const { url, playing, loop, controls, muted, config, width, height } = this.props;\n    const style = {\n      width: width === \"auto\" ? width : \"100%\",\n      height: height === \"auto\" ? height : \"100%\"\n    };\n    if (controls === false) {\n      style[\"--controls\"] = \"none\";\n    }\n    return /* @__PURE__ */ import_react.default.createElement(\n      \"mux-player\",\n      {\n        ref: this.ref,\n        \"playback-id\": this.getPlaybackId(url),\n        style,\n        preload: \"auto\",\n        autoPlay: playing || void 0,\n        muted: muted ? \"\" : void 0,\n        loop: loop ? \"\" : void 0,\n        ...config.attributes\n      }\n    );\n  }\n}\n__publicField(Mux, \"displayName\", \"Mux\");\n__publicField(Mux, \"canPlay\", import_patterns.canPlay.mux);\n"]}